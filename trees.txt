Binary Tree:
                     1
                    / \
                   2   3
                  / \  / \
                 4   5 6  7                    
A binary tree is a datastrcuture in which every parent node can have atmost 2 child nodes.
Parent node can have 0 childs or 1 child or 2 childs 
Root: Top most node in a tree = 1
Edges: Connecting lines b/w nodes = 6
Nodes: 7
*** Number of edges =  Number of nodes-1
*** At each level of i, the maximum number of nodes is 2i
*** Maximum number of nodes possible at height h is (2^0 + 2^1 + 2^2+â€¦.2^h) = 2^(h+1)-1
Parents: 1,2,3
Child of 1: 2,3
Child of 2: 4,5
Child of 3: 6,7
Siblings of parent 1: 2,3
Siblings of parent 2: 4,5
Siblings of parent 3: 6,7
Leaf nodes: Nodes that don't have any children = 4,5,6,7
Internal/ Non-terminal nodes: The nodes which has atleast 1 child = 1,2,3
Degree: Total number of children of any node in a tree
Degree of 1: 2
Degree of 2: 2
Degree of 3: 2
Degree of 4,5,6,7: 0
Depth: The maximum number of edges in a path from root node to that particular node 
Height: The maximum number of edges in a path from that particular node to the leaf node
Path: The sequence of nodes and edges from one node to another is called a path
Subtree: Each child from a node forms a subtree recursively. Every child node will form a subtree on its parent node
------------------
Full Binary Tree / Strict Binary Tree / Proper Binary Tree / 2-Tree:
Every parent node can have either 0 child or 2 childs 
                     1
                    / \
                   2   3
                  / \  / \
                 4   5 6  7
                         / \
                        8   9
------------------
Perfect Binary Tree:
Every parent should have exactly 2 childrens and all leaves should be at same level
                     1
                    / \
                   2   3
                  / \  / \
                 4   5 6  7

*** Let 'n' is the depth of perfect binary tree. Then,
*** Total number of nodes: 2^(n+1)-1
*** Total number of leaf nodes: 2^n 
------------------
Degenerate binary trees are of 2 types -> Left Skew and Right Skew Binary Trees 
Left Skewed Binary Tree:
Left skewed binary trees in which all the nodes are having a left child or no child at all
Left dominated tree
All the right nodes are NULL
                       1
                      /
                     2
                    /
                   3
                  /
                 4
-----------------
Right Skewed Binary Tree:
Right skewed binary trees in which all the nodes are having a right child or no child at all
Right dominated tree
All the left nodes are NULL
                       1
                        \
                         2
                          \
                           3
                            \
                             4
-----------------
Complete Binary Tree:
A complete binary tree is a special type of binary tree where all the levels of the tree are filled completely except the lowest level nodes which are filled from as left as possible
A Complete Binary Tree of having h will be a Perfect Binary Tree up to h-1 height and In the last level, the elements will be filled from left to right without skipping.
Any BT which can represent an array without having blank space (or null values) in the middle of any nodes.
                     1                                      
                    / \
                   2   3
                  / \  / 
                 4   5 6  
Array = [1,2,3,4,5,6,None] ---> Complete binary tree
                     1                                      
                    / \
                   2   3
                  /    / 
                 4    6  
Array = [1,2,3,4,None,6,None] ---> Not a complete binary tree as 'None' is in b/w 2 nodes

       x
     /   \
    /     \
   x       x
  / \     / \
 x   x   x   x
/ \ /
x x x
Array = [x,x,x,x,x,x,x,x,x,x,None,None,None,None,None] ---> Complete binary tree 
-------------------
Binary Search Tree:
All nodes of left subtree are less than the root node
All nodes of right subtree are more than the root node
Both subtrees of each node are also BSTs i.e. they have the above two properties
               27
             /   \
            14    35
           /  \  /  \
          10 19 31  42

Left sub tree of root(27) i.e, 14,10,19 all 3 nodes less than 27
Right sub tree of root(27) i.e, 35,31,42 all 3 nodes greater than 27
Left sub tree of 14 i.e, 10 less than 14
Right sub tree of 14 i.e, 19 less than 14
Left sub tree of 35 i.e, 31 less than 35
Right sub tree of 35 i.e, less than 42
-------------------
Balanced Binary Tree:
The absolute difference of heights of left and right subtrees at any node is less than or equal to 1 
For each node, its left subtree is a balanced binary tree
For each node, its right subtree is a balanced binary tree
Full Balanced Binary Tree: 
If difference b/w left and right subtrees of all nodes should be 0, then it is a balanced binary tree 
For full balanced binary tree, balance factor = 0
                       1
                      / \
                     /   \
                    2     3
                   / \   
                  4   5
For node 1: height of left subtree = 2 
For node 1: height of right subtree = 1
Diff = 2-1 = 1, So node 1 is balanced
For node 2: height of left subtree = 1
For node 2: height of right subtree = 1
Diff = 1-1 = 0, So node 2 is balanced 
For nodes 3,4,5 There are left and right subtrees, So they are balanced too
Overall Tree is balanced finally
If difference b/w left and right subtrees of all nodes in a binary tree is 1, then it has a balance factor = 1
If in a tree, There are more than 2 balance factors i.e, 0 and 1, then it is just a balanced binary tree.
---------------------
Balanced Binary Search Tree:
All nodes of left subtree are less than the root node
All nodes of right subtree are more than the root node
Both subtrees of each node are also BSTs
The absolute difference of heights of left and right subtrees at any node is less than or equal to 1 
                              40
                             / \
                            36  49
                           / \   \
                          35  38  51
                               \
                                39
---------------------
Self Balancing Binary Search Trees:
---------------------
Height Balancing Trees:
----------------------
                               

